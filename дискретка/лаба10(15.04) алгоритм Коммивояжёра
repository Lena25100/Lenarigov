using System;
using System.Collections.Generic;
using System.Linq;

class Komm
{
    static int[,] graph = {
        { int.MaxValue, 10, 15, 20 },
        { 10, int.MaxValue, 35, 25 },
        { 15, 35, int.MaxValue, 30 },
        { 20, 25, 30, int.MaxValue }
    };

    static int n = 4; 

    static List<int> cities = Enumerable.Range(1, n - 1).ToList(); 

    static int minCost = int.MaxValue;
    static List<int> bestPath = null;

    static void Main()
    {
        foreach (var perm in GetPermutations(cities, cities.Count))
        {
            List<int> path = new List<int> { 0 };
            path.AddRange(perm);
            path.Add(0); 

            int cost = 0;
            for (int i = 0; i < path.Count - 1; i++)
            {
                int from = path[i];
                int to = path[i + 1];
                cost += graph[from, to];
            }

            if (cost < minCost)
            {
                minCost = cost;
                bestPath = new List<int>(path);
            }
        }

        Console.WriteLine("Минимальный путь:");
        Console.WriteLine(string.Join(" -> ", bestPath));
        Console.WriteLine($"Стоимость: {minCost}");
    }

    static IEnumerable<List<T>> GetPermutations<T>(List<T> list, int length)
    {
        if (length == 1)
            return list.Select(t => new List<T> { t });

        return GetPermutations(list, length - 1)
            .SelectMany(t => list.Where(e => !t.Contains(e)),
                (t1, t2) => t1.Concat(new List<T> { t2 }).ToList());
    }
}
